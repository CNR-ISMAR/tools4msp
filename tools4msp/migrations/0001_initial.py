# Generated by Django 2.2.2 on 2019-07-17 05:10

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import tools4msp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CaseStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('cstype', models.CharField(choices=[('default', 'Default run'), ('customize', 'Customize run')], max_length=10, verbose_name='CS Type')),
                ('module', models.CharField(choices=[('cea', 'CEA'), ('musc', 'MUSC'), ('partrac', 'Particle tracking')], max_length=10, verbose_name='Module type')),
                ('resolution', models.FloatField(default=1000, help_text='resoution of analysis (meters)')),
                ('domain_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='polygon geometry(Lat Log WGS84)', null=True, srid=4326)),
                ('is_published', models.BooleanField(default=False, help_text='Should this Case Study be published?', verbose_name='Is Published')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Case studies',
                'permissions': (('download_casestudy', 'Download case study'), ('run_casestudy', 'Run case study')),
            },
        ),
        migrations.CreateModel(
            name='CaseStudyGrid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expression', models.TextField(blank=True, null=True, verbose_name='Pre-processing expression')),
                ('resource_file', models.CharField(blank=True, max_length=500, null=True)),
                ('thumbnail_url', models.CharField(blank=True, max_length=500, null=True)),
                ('expression_hash', models.CharField(blank=True, max_length=32)),
                ('maxvalue', models.FloatField(blank=True, null=True)),
                ('minvalue', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CaseStudyRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('domain_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('configuration', jsonfield.fields.JSONField(blank=True, null=True)),
                ('casestudy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CaseStudy')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_casestudyrun', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
        ),
        migrations.CreateModel(
            name='CodedLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.CharField(choices=[('grid', 'Grid'), ('use', 'Activity & Uses'), ('env', 'Environmental receptor'), ('pre', 'Pressure'), ('out', 'Outputs')], max_length=10)),
                ('code', models.CharField(max_length=10)),
                ('label', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('old_label', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['group', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Context',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('reference_date', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=100)),
                ('label', models.CharField(max_length=100)),
                ('expression', models.TextField(blank=True, null=True, verbose_name='Pre-processing expression')),
                ('dataset_type', models.CharField(choices=[('grid', 'Grid'), ('use', 'Activity & Uses'), ('env', 'Environmental receptor'), ('pre', 'Pressure'), ('out', 'Outputs')], max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='DomainArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geo', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='polygon geometry(Lat Log WGS84)', null=True, srid=4326)),
                ('label', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MsfdEnv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(blank=True, max_length=100, null=True)),
                ('ecosystem_element', models.CharField(blank=True, max_length=200, null=True)),
                ('broad_group', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'verbose_name': 'MSFD environmental receptor',
                'ordering': ['theme', 'ecosystem_element', 'broad_group'],
            },
        ),
        migrations.CreateModel(
            name='MsfdPres',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(blank=True, max_length=100, null=True)),
                ('msfd_pressure', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'verbose_name': 'MSFD pressure',
                'ordering': ['theme', 'msfd_pressure'],
            },
        ),
        migrations.CreateModel(
            name='MsfdUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(blank=True, max_length=100, null=True)),
                ('activity', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'verbose_name': 'MSFD Activity',
                'verbose_name_plural': 'MSFD Activities',
                'ordering': ['theme', 'activity'],
            },
        ),
        migrations.CreateModel(
            name='Env',
            fields=[
                ('codedlabel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tools4msp.CodedLabel')),
                ('msfd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.MsfdEnv')),
            ],
            options={
                'verbose_name': 'Environmental receptor',
                'ordering': ['label'],
            },
            bases=('tools4msp.codedlabel',),
        ),
        migrations.CreateModel(
            name='Pressure',
            fields=[
                ('codedlabel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tools4msp.CodedLabel')),
                ('msfd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.MsfdPres')),
            ],
            options={
                'ordering': ['label'],
            },
            bases=('tools4msp.codedlabel',),
        ),
        migrations.CreateModel(
            name='Use',
            fields=[
                ('codedlabel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tools4msp.CodedLabel')),
                ('msfd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.MsfdUse')),
            ],
            options={
                'ordering': ['label'],
            },
            bases=('tools4msp.codedlabel',),
        ),
        migrations.CreateModel(
            name='CaseStudyRunOutputLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to=tools4msp.models.generate_filename)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('casestudyrun', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CaseStudyRun')),
                ('coded_label', models.ForeignKey(limit_choices_to={'group__in': ['grid', 'pre', 'env', 'use', 'out']}, on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CodedLabel')),
            ],
            options={
                'ordering': ['coded_label__group'],
            },
        ),
        migrations.CreateModel(
            name='CaseStudyRunOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to=tools4msp.models.generate_filename)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('casestudyrun', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CaseStudyRun')),
                ('coded_label', models.ForeignKey(limit_choices_to={'group__in': ['grid', 'pre', 'env', 'use', 'out']}, on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CodedLabel')),
            ],
            options={
                'ordering': ['coded_label'],
            },
        ),
        migrations.CreateModel(
            name='CaseStudyRunLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to=tools4msp.models.generate_filename)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('casestudy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CaseStudyRun')),
                ('coded_label', models.ForeignKey(limit_choices_to={'group__in': ['grid', 'pre', 'env', 'use', 'out']}, on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CodedLabel')),
            ],
            options={
                'ordering': ['coded_label__group'],
            },
        ),
        migrations.CreateModel(
            name='CaseStudyRunInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to=tools4msp.models.generate_filename)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('casestudy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inputs', to='tools4msp.CaseStudyRun')),
                ('coded_label', models.ForeignKey(limit_choices_to={'group__in': ['grid', 'pre', 'env', 'use', 'out']}, on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CodedLabel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CaseStudyLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to=tools4msp.models.generate_filename)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('casestudy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layers', to='tools4msp.CaseStudy')),
                ('coded_label', models.ForeignKey(limit_choices_to={'group__in': ['grid', 'pre', 'env', 'use', 'out']}, on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CodedLabel')),
            ],
            options={
                'ordering': ['coded_label__group'],
            },
        ),
        migrations.CreateModel(
            name='CaseStudyInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to=tools4msp.models.generate_filename)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('casestudy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inputs', to='tools4msp.CaseStudy')),
                ('coded_label', models.ForeignKey(limit_choices_to={'group__in': ['grid', 'pre', 'env', 'use', 'out']}, on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CodedLabel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='casestudy',
            name='domain_area_dataset',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CaseStudyGrid', verbose_name='Domain area (source dataset)'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='import_domain_area',
            field=models.ManyToManyField(blank=True, to='tools4msp.DomainArea'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField()),
                ('distance', models.FloatField(default=0)),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Context')),
                ('pres', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Pressure')),
                ('use', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Use')),
            ],
            options={
                'verbose_name': 'Pressure weight',
            },
        ),
        migrations.CreateModel(
            name='Sensitivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensitivity', models.FloatField()),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Context')),
                ('env', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Env')),
                ('pres', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Pressure')),
            ],
            options={
                'verbose_name_plural': 'Sensitivities',
            },
        ),
        migrations.CreateModel(
            name='ESCapacity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_provisioning', models.FloatField(blank=True, null=True)),
                ('raw_material', models.FloatField(blank=True, null=True)),
                ('air_quality', models.FloatField(blank=True, null=True)),
                ('disturbance_protection', models.FloatField(blank=True, null=True)),
                ('water_quality', models.FloatField(blank=True, null=True)),
                ('biological_control', models.FloatField(blank=True, null=True)),
                ('cycling_of_nutrients', models.FloatField(blank=True, null=True)),
                ('cognitive_benefits', models.FloatField(blank=True, null=True)),
                ('leisure', models.FloatField(blank=True, null=True)),
                ('feel_good_warm_glove', models.FloatField(blank=True, null=True, verbose_name='Feel good/warm glove')),
                ('educational_and_research', models.FloatField(blank=True, null=True)),
                ('non_use_ethical_values_iconic_species', models.FloatField(blank=True, null=True, verbose_name='Non use/ethical values/iconic species')),
                ('photosynthesis', models.FloatField(blank=True, null=True)),
                ('nutrient_cycling', models.FloatField(blank=True, null=True)),
                ('nursery', models.FloatField(blank=True, null=True)),
                ('biodiversity', models.FloatField(blank=True, null=True)),
                ('env', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Env')),
            ],
            options={
                'verbose_name_plural': 'ES Capacities',
            },
        ),
        migrations.CreateModel(
            name='CaseStudyUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expression', models.TextField(blank=True, null=True, verbose_name='Pre-processing expression')),
                ('resource_file', models.CharField(blank=True, max_length=500, null=True)),
                ('thumbnail_url', models.CharField(blank=True, max_length=500, null=True)),
                ('expression_hash', models.CharField(blank=True, max_length=32)),
                ('maxvalue', models.FloatField(blank=True, null=True)),
                ('minvalue', models.FloatField(blank=True, null=True)),
                ('casestudy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CaseStudy')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Use')),
            ],
            options={
                'ordering': ['name__label'],
            },
        ),
        migrations.CreateModel(
            name='CaseStudyPressure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expression', models.TextField(blank=True, null=True, verbose_name='Pre-processing expression')),
                ('resource_file', models.CharField(blank=True, max_length=500, null=True)),
                ('thumbnail_url', models.CharField(blank=True, max_length=500, null=True)),
                ('expression_hash', models.CharField(blank=True, max_length=32)),
                ('maxvalue', models.FloatField(blank=True, null=True)),
                ('minvalue', models.FloatField(blank=True, null=True)),
                ('casestudy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CaseStudy')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Pressure')),
                ('source_use', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Use')),
            ],
            options={
                'ordering': ['name__label'],
            },
        ),
        migrations.CreateModel(
            name='CaseStudyEnv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expression', models.TextField(blank=True, null=True, verbose_name='Pre-processing expression')),
                ('resource_file', models.CharField(blank=True, max_length=500, null=True)),
                ('thumbnail_url', models.CharField(blank=True, max_length=500, null=True)),
                ('expression_hash', models.CharField(blank=True, max_length=32)),
                ('maxvalue', models.FloatField(blank=True, null=True)),
                ('minvalue', models.FloatField(blank=True, null=True)),
                ('casestudy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.CaseStudy')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools4msp.Env')),
            ],
            options={
                'ordering': ['name__label'],
            },
        ),
    ]
